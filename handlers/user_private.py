import asyncio
import html
import re
import traceback
from typing import List

from aiogram import types, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from parser import get_posts_for_channels
from yandex import process_user_message

user_private_router = Router()

"""
-------------------------------------------------------------------------
–ó–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é. –ò—Ö –º–æ–∂–Ω–æ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –¥–æ–ø —Ç–µ–∫—Å—Ç–æ–º
-------------------------------------------------------------------------
"""


@user_private_router.message(CommandStart(), Command('start'))
async def cmd_start(message: types.Message) -> None:
    text = as_list(as_marked_section(Bold("üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç Telegram –µ—â–µ —É–¥–æ–±–Ω–µ–µ!"),

                                     "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:",

                                     "1. üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∞ —è –ø–æ–º–æ–≥—É –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞.",
                                     "2. üì® –ü–æ–ª—É—á–∞—Ç—å –ª—É—á—à–∏–µ –ø–æ—Å—Ç—ã ‚Äî —è –ø–æ–¥–±–µ—Ä—É —Å–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –ø—Ä—è–º–æ –≤ —Ç–≤–æ–π —á–∞—Ç.",
                                     "3. ‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É ‚Äî –≤—ã–±–∏—Ä–∞–π, –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç—å.",

                                     "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –∏ —è –≤—Å—ë —É—Å—Ç—Ä–æ—é!"))
    await message.answer(text.as_html())

    """
    # ID Username
    # –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    # –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —è–Ω–¥–µ–∫—Å –∫–ª–∞—É–¥
    # –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ—Ç–æ–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ 4 —Å—Ç–æ–ª–±—Ü–µ
    """


@user_private_router.message(Command("update"))
async def update_cmd(message: Message, state: FSMContext) -> None:
    test = as_list(as_marked_section(Bold("–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")))
    await message.answer(test.as_html())


@user_private_router.message(Command('support'))
async def support_cmd(message: Message) -> None:
    text = as_list(
        as_marked_section(Bold("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:"), " @mayflower17",
                          " @underthinfluenc"))
    await message.answer(text.as_html())


user_interests = {}
scheduler = AsyncIOScheduler(event_loop=asyncio.get_event_loop())
last_post_ids = {}

user_private_router = Router()

FREQUENCIES = {
    "immediate": 60,
    "3_hours": 10800,
    "6_hours": 21600,
    "24_hours": 86400,
    "3_days": 259200,
    "5_days": 432000
}


def get_frequency_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ –º–µ—Ä–µ –≤—ã—Ö–æ–¥–∞", callback_data="freq_immediate"),
                InlineKeyboardButton(text="–ü–æ—Å—Ç/3 —á–∞—Å–∞", callback_data="freq_3_hours"),
                InlineKeyboardButton(text="–ü–æ—Å—Ç/6 —á–∞—Å–æ–≤", callback_data="freq_6_hours")
            ],
            [
                InlineKeyboardButton(text="–ü–æ—Å—Ç/24 —á–∞—Å–∞", callback_data="freq_24_hours"),
                InlineKeyboardButton(text="–ü–æ—Å—Ç/3 –¥–Ω—è", callback_data="freq_3_days"),
                InlineKeyboardButton(text="–ü–æ—Å—Ç/5 –¥–Ω–µ–π", callback_data="freq_5_days")
            ]
        ]
    )


async def send_post_to_user(user_id: int, post: dict, bot):
    try:
        text = f"üì¢ –ü–æ—Å—Ç –∏–∑ {post['channel']}:\n\n{html.escape(post['text'])}"
        if post["links"]:
            text += "\n\nüîó –°—Å—ã–ª–∫–∏:\n" + "\n".join(post["links"])

        print(f"[–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}] –¢–µ–∫—Å—Ç: {text[:100]}...")

        if post["media"]:
            media = post["media"][0]
            if media["type"] == "photo":
                await bot.send_photo(user_id, media["id"], caption=text, parse_mode="HTML")
            elif "video" in media["type"]:
                await bot.send_video(user_id, media["id"], caption=text, parse_mode="HTML")
            elif "document" in media["type"]:
                await bot.send_document(user_id, media["id"], caption=text, parse_mode="HTML")
            else:
                await bot.send_message(user_id, text, parse_mode="HTML")
        else:
            await bot.send_message(user_id, text, parse_mode="HTML")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}]: {e}")
        print(f"[Traceback]: {traceback.format_exc()}")


async def schedule_posts(user_id: int, channels: List[str], frequency: int, bot):
    async def job():
        posts = await get_posts_for_channels(channels, limit=1)
        for post in posts:
            post_key = f"{post['channel']}_{post.get('id', hash(post['text']))}"
            if frequency == FREQUENCIES["immediate"]:
                if post_key not in last_post_ids.get(user_id, {}):
                    await send_post_to_user(user_id, post, bot)
                    last_post_ids.setdefault(user_id, {})[post_key] = True
            else:
                await send_post_to_user(user_id, post, bot)

    scheduler.add_job(
        job,
        trigger=IntervalTrigger(seconds=frequency),
        id=f"post_job_{user_id}",
        replace_existing=True
    )


async def send_initial_posts(user_id: int, channels: List[str], bot):
    try:
        posts = await get_posts_for_channels(channels, limit=2)
        for post in posts:
            await send_post_to_user(user_id, post, bot)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}]: {e}")


@user_private_router.message()
async def handle_message(message: types.Message, bot):
    user_id = message.from_user.id

    if user_id in user_interests:
        interest = user_interests[user_id]["interest"]
        await message.answer(
            f"‚úÖ –¢—ã —É–∂–µ —É–∫–∞–∑–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å: <b>{html.escape(interest)}</b>\n\n"
            f"üîΩ –í–æ—Ç —Ç–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ üëá",
            reply_markup=get_change_interest_kb(),
            parse_mode="HTML"
        )
        await message.answer(user_interests[user_id]["channels"], disable_web_page_preview=True, parse_mode="HTML")
        return

    await message.answer("ü§ñ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é –∫–∞–Ω–∞–ª—ã...", parse_mode="HTML")

    try:
        interest, channels_text = await process_user_message(message.text)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", parse_mode="HTML")
        print(f"[–û—à–∏–±–∫–∞]: {e}")
        return

    user_interests[user_id] = {
        "interest": interest,
        "channels": channels_text,
        "channel_usernames": [re.sub(r"^\d+\.\s*", "", line.split(" ‚Äî ")[0]) for line in channels_text.split("\n") if
                              line]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    }

    try:
        text = (
            f"üß† –Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å: <b>{html.escape(interest)}</b>\n\n"
            f"üì¢ –í–æ—Ç —Ç–æ–ø-–∫–∞–Ω–∞–ª—ã:\n\n{html.escape(channels_text)}\n\n"
            f"‚è∞ –í—ã–±–µ—Ä–∏, –∫–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã:"
        )
        await message.answer(
            text,
            reply_markup=get_frequency_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ]: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", parse_mode="HTML")


@user_private_router.callback_query(lambda c: c.data.startswith("freq_"))
async def set_frequency(callback: types.CallbackQuery, bot):
    user_id = callback.from_user.id
    freq_key = callback.data.replace("freq_", "")
    frequency = FREQUENCIES.get(freq_key)

    if not frequency:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞.", parse_mode="HTML")
        await callback.answer()
        return

    if user_id not in user_interests:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å.", parse_mode="HTML")
        await callback.answer()
        return

    user_interests[user_id]["frequency"] = frequency
    channels = user_interests[user_id]["channel_usernames"]

    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback
    await callback.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    await callback.message.answer(
        f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {freq_key.replace('_', ' ')}.\n"
        f"–Ø –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ —Ç–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!",
        parse_mode="HTML"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(send_initial_posts(user_id, channels, bot))
    await schedule_posts(user_id, channels, frequency, bot)


@user_private_router.callback_query(lambda c: c.data == "change_interest")
async def change_interest_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    scheduler.remove_job(f"post_job_{user_id}", jobstore=None)
    user_interests.pop(user_id, None)
    last_post_ids.pop(user_id, None)
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.", parse_mode="HTML")
    await callback.answer()


def get_change_interest_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å", callback_data="change_interest")]
        ]
    )


scheduler.start()
