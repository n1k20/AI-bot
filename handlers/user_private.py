from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.enums import ParseMode
from aiogram.utils.formatting import as_list, as_marked_section, Bold

from filters.chat_types import ChatTypeFilter
from keyboard.new_reply import get_keyboard
from keyboard import reply


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(or_f(CommandStart(), Command('start'),
                                  (F.text.lower().contains("–ø—Ä–∏–≤–µ—Ç")) | (F.text.lower().contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"))))
async def cmd_start(message: types.Message) -> None:
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} ! –Ø —É–º–Ω—ã–π –±–æ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –∫—É—á—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–∏—Å–∫'
        ' –Ω–µ–Ω—É–∂–Ω–æ–π —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', reply_markup=get_keyboard(
            'üßÆ –ú–µ–Ω—é',
            'ü§ñ –û –±–æ—Ç–µ',
            'üÜò –ü–æ–º–æ—â—å',
            'üí¥ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
            placeholder="–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É",
            sizes=(2, 2)
        ))


@user_private_router.message(or_f(Command('menu'), F.text.lower().contains("–º–µ–Ω—é")))
async def menu(message: types.Message) -> None:
    text = as_list(
        as_marked_section(
            Bold("Menu bot"),
            "–Ø –º–æ–≥—É –º–Ω–æ–≥–æ–µ ü§ñ "
            "–ù–æ –º–æ—è –≥–ª–∞–≤–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üõÑ "
            "–≠—Ç–æ –º–æ—è –∫–ª—é—á–µ–≤–∞—è –∏–¥–µ—è"
    ),
    as_marked_section(
        Bold("<b> –ß—Ç–æ —è –Ω–µ –º–æ–≥—É –¥–µ–ª–∞—Ç—å: </b> ", parse_mode=ParseMode.HTML),
        "–ü–æ–∫–∞ –Ω–µ—Ç –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        "–ù–µ –º–æ–≥—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å",
        "–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∫—Ä–æ–º–µ Telegram", marker="‚ùå"
    ),
    sep='\n--------------------------------------------------\n')
    await message.answer(text.as_html(), reply_markup=reply.start_keyboard)


@user_private_router.message(or_f(Command('help'), F.text.lower().contains("–ø–æ–º–æ—â—å")))
async def help(message: types.Message) -> None:
    await message.answer('–Ø –ø–æ–º–æ–≥—É –≤–∞–º', reply_markup=reply.del_keyboard)


@user_private_router.message(or_f(Command('about'), F.text.lower().contains("–æ –±–æ—Ç–µ")))
async def about_cmd(message: types.Message) -> None:
    await message.answer(f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: Nikolai Borgoyakov (TG - @mayflower17 –∏–ª–∏ n1k17) - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞",
                         reply_markup=reply.del_keyboard)
    await message.answer(f"–í–ª–∞–¥–∏—Å–ª–∞–≤ –ö–æ—Å—Ç—Ä–æ–≤ - –∞–Ω–∞–ª–∏—Ç–∏–∫ ")


@user_private_router.message(F.text.lower().contains("–ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
@user_private_router.message(Command('payment'))
async def payment_cmd(message: types.Message) -> None:
    text = as_marked_section(Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"),
                             "üí≥ –∫–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
                             "üíµ –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –°–±–µ—Ä",
                             marker='‚úÖ ')
    await message.answer(text.as_html(), reply_markup=reply.del_keyboard)


@user_private_router.message(Command('profile'))
async def profile_cmd(message: types.Message) -> None:
    await message.answer("<b> You profile: </b>", parse_mode=ParseMode.HTML)
    await message.answer("DATA:")
    await message.answer(f"{message.from_user.first_name}")
    await message.answer(f"{message.from_user.last_name}")
    await message.answer(f"@{message.from_user.username}")
    await message.answer(f"{message.from_user.id}")



@user_private_router.message(F.contact)
async def contact_cmd(message: types.Message) -> None:
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await message.answer(str(message.contact.phone_number))

@user_private_router.message(F.location)
async def location_cmd(message: types.Message) -> None:
    await message.answer("–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    await message.answer(str(message.location))







